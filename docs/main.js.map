{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.material.module.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/randomizer/randomizer.component.html","webpack:///./src/app/components/randomizer/randomizer.component.scss","webpack:///./src/app/components/randomizer/randomizer.component.ts","webpack:///./src/app/components/roles-table/roles-table.component.html","webpack:///./src/app/components/roles-table/roles-table.component.scss","webpack:///./src/app/components/roles-table/roles-table.component.ts","webpack:///./src/app/components/settings/settings.component.html","webpack:///./src/app/components/settings/settings.component.scss","webpack:///./src/app/components/settings/settings.component.ts","webpack:///./src/app/enums/randomizer-modes.enum.ts","webpack:///./src/app/helpers/data-compression.helper.ts","webpack:///./src/app/services/data-storage/data-storage.service.ts","webpack:///./src/app/services/slack-api/slack-api.config.ts","webpack:///./src/app/services/slack-api/slack-api.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n    <span>Agile Roles Randomizer</span>\\n</mat-toolbar>\\n\\n<div class=\\\"nav-container\\\">\\n    <mat-tab-group [selectedIndex]=\\\"selectedIndex\\\" (selectedTabChange)=\\\"navigate($event)\\\">\\n        <mat-tab label=\\\"Рандомайзер\\\"></mat-tab>\\n        <mat-tab label=\\\"Настройки\\\"></mat-tab>\\n    </mat-tab-group>\\n    <mat-divider class=\\\"divider\\\"></mat-divider>\\n</div>\\n\\n<router-outlet></router-outlet>\\n\"","module.exports = \".toolbar {\\n  display: flex;\\n  justify-content: center; }\\n\\nmat-tab-group {\\n  flex-direction: row; }\\n\\n.nav-container {\\n  display: flex;\\n  align-items: center;\\n  flex-direction: column; }\\n\\n.divider {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvRDpcXNCf0LXRgNC10L3QvtGBXFxQcm9qZWN0c1xcYWdpbGUtcm9sZXMtcmFuZG9taXplcjIvc3JjXFxhcHBcXGFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWE7RUFDYix3QkFBdUIsRUFDeEI7O0FBRUQ7RUFDRSxvQkFBbUIsRUFDcEI7O0FBRUQ7RUFDRSxjQUFhO0VBQ2Isb0JBQW1CO0VBQ25CLHVCQUFzQixFQUN2Qjs7QUFFRDtFQUNFLFlBQVcsRUFDWiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50b29sYmFyIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbm1hdC10YWItZ3JvdXAge1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuXG4ubmF2LWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7IFxuICBhbGlnbi1pdGVtczogY2VudGVyOyBcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmRpdmlkZXIge1xuICB3aWR0aDogMTAwJTtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, RouterEvent, NavigationEnd } from '@angular/router';\nimport { MatTabChangeEvent } from '@angular/material';\nimport { filter, take } from 'rxjs/operators';\n\nconst routingMap = ['/', '/settings'];\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n    public selectedIndex: number;\n\n    constructor(private router: Router) {}\n\n    ngOnInit(): void {\n        this.router.events\n            .pipe(\n                filter((event: RouterEvent) => event instanceof NavigationEnd),\n                take(1),\n            )\n            .subscribe(() => (this.selectedIndex = routingMap.indexOf(this.router.url) || 0));\n    }\n\n    public navigate({ index }: MatTabChangeEvent): void {\n        this.router.navigate([routingMap[index]]);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatChipsModule,\n    MatOptionModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatSelectModule,\n    MatInputModule,\n    MatSidenavModule,\n    MatCardModule,\n    MatIconModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTabsModule,\n    MatListModule,\n    MatTableModule,\n} from '@angular/material';\n\n@NgModule({\n    imports: [\n        MatButtonModule,\n        MatCheckboxModule,\n        MatToolbarModule,\n        MatChipsModule,\n        MatOptionModule,\n        MatGridListModule,\n        MatProgressBarModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatMenuModule,\n        MatDialogModule,\n        MatSnackBarModule,\n        MatSelectModule,\n        MatInputModule,\n        MatSidenavModule,\n        MatCardModule,\n        MatIconModule,\n        MatRadioModule,\n        MatProgressSpinnerModule,\n        MatTabsModule,\n        MatListModule,\n        MatTableModule,\n    ],\n    exports: [\n        MatButtonModule,\n        MatCheckboxModule,\n        MatToolbarModule,\n        MatChipsModule,\n        MatOptionModule,\n        MatGridListModule,\n        MatProgressBarModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatMenuModule,\n        MatDialogModule,\n        MatSnackBarModule,\n        MatSelectModule,\n        MatInputModule,\n        MatSidenavModule,\n        MatCardModule,\n        MatIconModule,\n        MatRadioModule,\n        MatProgressSpinnerModule,\n        MatTabsModule,\n        MatListModule,\n        MatTableModule,\n    ],\n})\nexport class AppMaterialModule {}\n","import 'hammerjs';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { AppMaterialModule } from './app.material.module';\nimport { AppComponent } from './app.component';\nimport { RouterModule } from '@angular/router';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CommonModule } from '@angular/common';\nimport { RandomizerComponent } from './components/randomizer/randomizer.component';\nimport { SettingsComponent } from './components/settings/settings.component';\nimport { RolesTableComponent } from './components/roles-table/roles-table.component';\nimport { DataStorageService } from './services/data-storage/data-storage.service';\nimport { ClipboardModule } from 'ngx-clipboard';\nimport { SlackApiService } from './services/slack-api/slack-api.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        CommonModule,\n        FormsModule,\n        AppMaterialModule,\n        CdkTableModule,\n        BrowserAnimationsModule,\n        ClipboardModule,\n        HttpClientModule,\n        RouterModule.forRoot([\n            {\n                path: '',\n                component: RandomizerComponent,\n            },\n            {\n                path: 'settings',\n                component: SettingsComponent,\n            },\n        ]),\n    ],\n    declarations: [AppComponent, RandomizerComponent, SettingsComponent, RolesTableComponent],\n    providers: [DataStorageService, SlackApiService],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","module.exports = \"<div class=\\\"cards-content\\\">\\n    <mat-card>\\n        <mat-card-content>\\n            <h2 class=\\\"card-title\\\">Команда</h2>\\n            <div *ngFor=\\\"let teamMember of allTeamMembers\\\">\\n                <mat-checkbox [(ngModel)]=\\\"checked[teamMember]\\\" [checked]=\\\"true\\\" color=\\\"primary\\\">\\n                    {{ teamMember }}\\n                </mat-checkbox>\\n            </div>\\n        </mat-card-content>\\n    </mat-card>\\n\\n    <mat-card>\\n        <mat-card-content class=\\\"current-roles\\\">\\n            <h2 class=\\\"card-title\\\">Текущие роли:</h2>\\n\\n            <mat-form-field *ngFor=\\\"let role of roles\\\">\\n                <mat-select [placeholder]=\\\"role\\\" (selectionChange)=\\\"onSelectChange($event, role)\\\">\\n                    <mat-option *ngFor=\\\"let teamMember of getTeamMembersForRole(role)\\\" [value]=\\\"teamMember\\\">\\n                        {{ teamMember }}\\n                    </mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n\\n        </mat-card-content>\\n    </mat-card>\\n\\n    <mat-card>\\n        <mat-card-content>\\n            <h2 class=\\\"card-title\\\">Выбранные роли:</h2>\\n            <ng-container *ngFor=\\\"let chosenRole of chosenRoles\\\">\\n                <div class=\\\"chosen-role\\\">\\n                    <div class=\\\"role-name\\\"><b>{{ chosenRole.role }}:</b></div>\\n                    <div>{{ chosenRole.teamMember }}</div>\\n                </div>\\n            </ng-container>\\n\\n            <button (click)=\\\"sendToSlack()\\\" *ngIf=\\\"chosenRoles && chosenRoles.length && !!slackToken && !!slackChannel\\\" mat-button color=\\\"primary\\\">\\n                Отправить в Slack\\n                <mat-icon>send</mat-icon>\\n            </button>\\n        </mat-card-content>\\n    </mat-card>\\n</div>\\n\\n<div class=\\\"button-container\\\">\\n    <button (click)=\\\"randomize()\\\" [disabled]=\\\"randomInProgress\\\" class=\\\"app-button\\\" mat-raised-button color=\\\"primary\\\">\\n        Выбрать новые роли\\n    </button>\\n</div>\"","module.exports = \".cards-content {\\n  padding: 5px;\\n  display: flex;\\n  justify-content: center; }\\n\\nmat-card {\\n  margin: 5px;\\n  padding: 50px; }\\n\\nmat-checkbox {\\n  margin: 10px;\\n  font-size: 16px; }\\n\\nmat-form-field {\\n  width: 250px; }\\n\\n.app-button {\\n  margin: 5px; }\\n\\n.card-title {\\n  margin: 10px 0;\\n  color: rgba(0, 0, 0, 0.54); }\\n\\n.current-roles {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.chosen-role {\\n  margin: 20px 0px;\\n  font-size: 16px;\\n  line-height: 1.6; }\\n\\n.role-name {\\n  color: rgba(0, 0, 0, 0.54); }\\n\\n.button-container {\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yYW5kb21pemVyL0Q6XFzQn9C10YDQtdC90L7RgVxcUHJvamVjdHNcXGFnaWxlLXJvbGVzLXJhbmRvbWl6ZXIyL3NyY1xcYXBwXFxjb21wb25lbnRzXFxyYW5kb21pemVyXFxyYW5kb21pemVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBWTtFQUNaLGNBQWE7RUFDYix3QkFBdUIsRUFDeEI7O0FBRUQ7RUFDRSxZQUFXO0VBQ1gsY0FBYSxFQUNkOztBQUVEO0VBQ0UsYUFBWTtFQUNaLGdCQUFlLEVBQ2hCOztBQUVEO0VBQ0UsYUFBWSxFQUNiOztBQUVEO0VBQ0UsWUFBVyxFQUNaOztBQUVEO0VBQ0UsZUFBYztFQUNkLDJCQUEwQixFQUMzQjs7QUFFRDtFQUNFLGNBQWE7RUFDYix1QkFBc0IsRUFDdkI7O0FBRUQ7RUFDRSxpQkFBZ0I7RUFDaEIsZ0JBQWU7RUFDZixpQkFBZ0IsRUFDakI7O0FBRUQ7RUFDRSwyQkFBMEIsRUFDM0I7O0FBRUQ7RUFDRSxjQUFhO0VBQ2Isd0JBQXVCO0VBQ3ZCLGlCQUFnQixFQUNqQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmFuZG9taXplci9yYW5kb21pemVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmRzLWNvbnRlbnQge1xuICBwYWRkaW5nOiA1cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG5tYXQtY2FyZCB7XG4gIG1hcmdpbjogNXB4O1xuICBwYWRkaW5nOiA1MHB4O1xufVxuXG5tYXQtY2hlY2tib3gge1xuICBtYXJnaW46IDEwcHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbn1cblxubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMjUwcHg7XG59XG5cbi5hcHAtYnV0dG9uIHtcbiAgbWFyZ2luOiA1cHg7XG59XG5cbi5jYXJkLXRpdGxlIHtcbiAgbWFyZ2luOiAxMHB4IDA7XG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xufVxuXG4uY3VycmVudC1yb2xlcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5jaG9zZW4tcm9sZSB7XG4gIG1hcmdpbjogMjBweCAwcHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNjtcbn1cblxuLnJvbGUtbmFtZSB7XG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xufVxuXG4uYnV0dG9uLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuIl19 */\"","import { RandomizerModes } from '../../enums/randomizer-modes.enum';\nimport { ChosenRoleInterface } from '../../interfaces/chosen-role.interface';\nimport { RolesMapInterface } from '../../interfaces/roles-map.interface';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { Component, OnInit } from '@angular/core';\nimport { MatSelectChange, MatSnackBar } from '@angular/material';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { SlackApiService } from '../../services/slack-api/slack-api.service';\n\nconst RANDOMIZE_ITERATIONS_COUNT = 50;\nconst RANDOMIZE_MILLISECONDS_COUNT = 2;\n\n@Component({\n    selector: 'app-randomizer',\n    templateUrl: './randomizer.component.html',\n    styleUrls: ['./randomizer.component.scss'],\n})\nexport class RandomizerComponent implements OnInit {\n    public allTeamMembers: string[];\n    public roles: string[];\n    public rolesMap: RolesMapInterface[];\n    public randomizerMode: RandomizerModes;\n    public instantChoice: boolean;\n    public slackToken: string;\n    public slackChannel: string;\n\n    public checked: Record<string, boolean> = {};\n    public lastIterationRoles: Record<string, string> = {};\n    public chosenRoles: ChosenRoleInterface[] = [];\n\n    public randomizeCount = 0;\n    public randomInProgress = false;\n\n    constructor(private dataStorageService: DataStorageService, private slackApiService: SlackApiService, private snackBar: MatSnackBar, private route: ActivatedRoute) {}\n\n    ngOnInit(): void {\n        this.route.queryParams.pipe(take(1)).subscribe(({ data }: Params) => {\n            if (data) {\n                try {\n                    const serviceData = JSON.parse(data);\n\n                    this.dataStorageService.restoreState(serviceData);\n                } catch {\n                    throw new Error('Cannot parse data JSON - invalid format');\n                }\n            }\n\n            this.allTeamMembers = this.dataStorageService.teamMembers;\n            this.roles = this.dataStorageService.roles;\n            this.rolesMap = this.dataStorageService.rolesMap;\n            this.randomizerMode = this.dataStorageService.randomizerMode;\n            this.instantChoice = this.dataStorageService.instantChoice;\n            this.slackToken = this.dataStorageService.slackToken;\n            this.slackChannel = this.dataStorageService.slackChannel;\n\n            this.allTeamMembers.forEach(teamMember => (this.checked[teamMember] = true));\n        });\n    }\n\n    public get checkedTeamMembers(): RolesMapInterface[] {\n        return this.rolesMap.filter(({ teamMember }: RolesMapInterface) => this.checked[teamMember]);\n    }\n\n    public getTeamMembersForRole(targetRole: string): string[] {\n        return this.checkedTeamMembers\n            .filter(({ teamMemberRoles }: RolesMapInterface) => teamMemberRoles.some((role: string) => role === targetRole))\n            .map(({ teamMember }: RolesMapInterface) => teamMember);\n    }\n\n    public onSelectChange({ value }: MatSelectChange, role: string): void {\n        this.lastIterationRoles[role] = value;\n    }\n\n    public randomize(): void {\n        this.randomInProgress = true;\n\n        setTimeout(() => {\n            const unsortedChosenRoles = this.getChosenRoles([]);\n\n            this.chosenRoles =\n                unsortedChosenRoles.length === this.roles.length\n                    ? this.roles.map((role: string) =>\n                          unsortedChosenRoles.find((chosenRoles: ChosenRoleInterface) => chosenRoles.role === role),\n                      )\n                    : [];\n\n            this.randomizeCount++;\n\n            if (!this.instantChoice && this.randomizeCount < RANDOMIZE_ITERATIONS_COUNT) {\n                this.randomize();\n            } else {\n                this.randomizeCount = 0;\n                this.randomInProgress = false;\n\n                if (unsortedChosenRoles.length !== this.roles.length) {\n                    this.snackBar.open('Невозможно выбрать все роли', 'Недостаточно участников', { duration: 4000 });\n                }\n            }\n        }, RANDOMIZE_MILLISECONDS_COUNT * this.randomizeCount);\n    }\n\n    public sendToSlack(): void {\n        this.slackApiService.setTopic(this.chosenRoles);\n    }\n\n    private roleComparator(role1: string, role2: string): number {\n        return this.getTeamMembersForRole(role1).length - this.getTeamMembersForRole(role2).length;\n    }\n\n    private getChosenRoles(alreadyChosenRoles: ChosenRoleInterface[]): ChosenRoleInterface[] {\n        const remainingRoles = this.roles\n            .filter((role: string) => !alreadyChosenRoles.some((chosenRole: ChosenRoleInterface) => chosenRole.role === role))\n            .sort(this.roleComparator.bind(this));\n\n        if (!remainingRoles.length) {\n            return alreadyChosenRoles;\n        }\n\n        const firstRole = remainingRoles[0];\n        const teamMembersForRole = this.getTeamMembersForRole(firstRole);\n        const notChosenTeamMembers = this.filterByNotChosen(teamMembersForRole, alreadyChosenRoles);\n        const membersFilteredByRandomizerMode = this.filterByRandomizerMode(firstRole, notChosenTeamMembers, this.randomizerMode);\n        const chosenTeamMember = this.getRandomMember(membersFilteredByRandomizerMode);\n\n        if (chosenTeamMember) {\n            alreadyChosenRoles.push({\n                role: firstRole,\n                teamMember: chosenTeamMember,\n            });\n        } else {\n            return alreadyChosenRoles;\n        }\n\n        return this.getChosenRoles(alreadyChosenRoles);\n    }\n\n    private getRandomMember<T>(teamMembers: T[]): T {\n        return teamMembers[Math.floor(Math.random() * teamMembers.length)];\n    }\n\n    private filterByRandomizerMode(role: string, teamMembers: string[], randomizerMode: RandomizerModes): string[] {\n        switch (randomizerMode) {\n            case RandomizerModes.NEW_MEMBERS_FOR_ITERATION:\n                return teamMembers.filter((teamMember: string) => !this.wasAlreadySelectedLastIteration(teamMember));\n            case RandomizerModes.NEW_MEMBERS_FOR_ROLE:\n                return teamMembers.filter((teamMember: string) => this.lastIterationRoles[role] !== teamMember);\n            default:\n                return teamMembers;\n        }\n    }\n\n    private filterByNotChosen(teamMembers: string[], chosenMembers: ChosenRoleInterface[]): string[] {\n        return teamMembers.filter(\n            (teamMember: string) => !chosenMembers.some((chosenRole: ChosenRoleInterface) => chosenRole.teamMember === teamMember),\n        );\n    }\n\n    private wasAlreadySelectedLastIteration(teamMember: string): boolean {\n        return Object.keys(this.lastIterationRoles)\n            .map((key: string) => this.lastIterationRoles[key])\n            .includes(teamMember);\n    }\n}\n","module.exports = \"<mat-table [dataSource]=\\\"filteredTeamMembers\\\" class=\\\"table\\\">\\n    <ng-container cdkColumnDef=\\\"name\\\">\\n        <mat-header-cell *cdkHeaderCellDef> Имя / роль </mat-header-cell>\\n        <mat-cell *cdkCellDef=\\\"let row\\\"> {{ row }} </mat-cell>\\n    </ng-container>\\n\\n    <ng-container *ngFor=\\\"let role of filteredRoles; let i = index;\\\" [cdkColumnDef]=\\\"role\\\">\\n        <mat-header-cell *cdkHeaderCellDef class=\\\"centered\\\"> {{ role }} </mat-header-cell>\\n        <mat-cell *cdkCellDef=\\\"let row; let j = index;\\\" class=\\\"centered\\\"> \\n            <mat-checkbox \\n                [checked]=\\\"rolesTableCheckboxesState[j] ? rolesTableCheckboxesState[j][i] : false\\\" \\n                (change)=\\\"onCheckBoxChange(j, i)\\\" \\n                color=\\\"primary\\\">\\n            </mat-checkbox> \\n        </mat-cell>\\n    </ng-container>\\n\\n    <mat-header-row *cdkHeaderRowDef=\\\"columns\\\"></mat-header-row>\\n    <mat-row *cdkRowDef=\\\"let row; columns: columns\\\"></mat-row>\\n</mat-table>\"","module.exports = \".centered {\\n  justify-content: center;\\n  text-align: center; }\\n\\n.table {\\n  min-width: 500px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yb2xlcy10YWJsZS9EOlxc0J/QtdGA0LXQvdC+0YFcXFByb2plY3RzXFxhZ2lsZS1yb2xlcy1yYW5kb21pemVyMi9zcmNcXGFwcFxcY29tcG9uZW50c1xccm9sZXMtdGFibGVcXHJvbGVzLXRhYmxlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksd0JBQXVCO0VBQ3ZCLG1CQUFrQixFQUNyQjs7QUFFRDtFQUNJLGlCQUFnQixFQUNuQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcm9sZXMtdGFibGUvcm9sZXMtdGFibGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2VudGVyZWQge1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnRhYmxlIHtcbiAgICBtaW4td2lkdGg6IDUwMHB4O1xufSJdfQ== */\"","import { RolesMapInterface } from '../../interfaces/roles-map.interface';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { Component, Input, SimpleChanges, OnChanges, OnInit } from '@angular/core';\nimport { uniq } from 'lodash';\n\n@Component({\n    selector: 'app-roles-table',\n    templateUrl: './roles-table.component.html',\n    styleUrls: ['./roles-table.component.scss'],\n})\nexport class RolesTableComponent implements OnInit, OnChanges {\n    @Input()\n    teamMembers: string[];\n    @Input()\n    roles: string[];\n\n    public filteredTeamMembers: string[];\n    public filteredRoles: string[];\n    public columns: string[];\n    public rolesTableCheckboxesState: boolean[][];\n\n    constructor(private dataService: DataStorageService) {}\n\n    ngOnInit(): void {\n        this.rolesTableCheckboxesState = this.dataService.rolesMap.map(({ teamMemberRoles }: RolesMapInterface) =>\n            this.roles.map((role: string) => teamMemberRoles.includes(role)),\n        );\n    }\n\n    ngOnChanges({ teamMembers, roles }: SimpleChanges): void {\n        if (teamMembers && teamMembers.currentValue) {\n            this.filteredTeamMembers = uniq(teamMembers.currentValue.filter(member => !!member));\n            this.saveStateToService();\n        }\n\n        if (roles && roles.currentValue) {\n            this.filteredRoles = uniq(roles.currentValue.filter(role => !!role));\n            this.columns = ['name', ...this.filteredRoles];\n            this.saveStateToService();\n        }\n    }\n\n    public onCheckBoxChange(i: number, j: number): void {\n        if (!this.rolesTableCheckboxesState[i]) {\n            this.rolesTableCheckboxesState[i] = new Array(this.roles.length).fill(false);\n        }\n\n        this.rolesTableCheckboxesState[i][j] = !this.rolesTableCheckboxesState[i][j];\n        this.saveStateToService();\n    }\n\n    private saveStateToService(): void {\n        if (!this.filteredTeamMembers || !this.filteredRoles || !this.rolesTableCheckboxesState) {\n            return;\n        }\n\n        const rolesMap = this.filteredTeamMembers.map((teamMember: string, memberIndex: number) => {\n            const teamMemberRoles = this.filteredRoles.filter((role: string, roleIndex: number) =>\n                this.rolesTableCheckboxesState[memberIndex] ? this.rolesTableCheckboxesState[memberIndex][roleIndex] : false,\n            );\n\n            return {\n                teamMember,\n                teamMemberRoles,\n            };\n        });\n\n        this.dataService.rolesMap = rolesMap;\n        this.dataService.roles = this.filteredRoles;\n        this.dataService.teamMembers = this.filteredTeamMembers;\n        this.dataService.updateState();\n    }\n}\n","module.exports = \"<div class=\\\"cards-content\\\">\\n    <div class=\\\"row-container\\\">\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <h2 class=\\\"card-title\\\">Режим рандомайзера:</h2> \\n                <mat-radio-group [(ngModel)]=\\\"randomizerMode\\\" (change)=\\\"saveStateToService()\\\">\\n                    <mat-radio-button color=\\\"primary\\\" [value]=\\\"randomizerModes.NEW_MEMBERS_FOR_ITERATION\\\">\\n                        Выбранные участники не могут быть выбраны на следующей итерации\\n                    </mat-radio-button>\\n                    <mat-radio-button color=\\\"primary\\\" [value]=\\\"randomizerModes.NEW_MEMBERS_FOR_ROLE\\\">\\n                        Одну роль нельзя занимать два раза подряд\\n                    </mat-radio-button>\\n                    <mat-radio-button color=\\\"primary\\\" [value]=\\\"randomizerModes.NO_RESTRICTIONS\\\">\\n                        Без ограничений\\n                    </mat-radio-button>\\n                </mat-radio-group>\\n            </mat-card-content>\\n        </mat-card>\\n\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <h2 class=\\\"card-title\\\">Мгновенный выбор:</h2> \\n                <mat-radio-group [(ngModel)]=\\\"instantChoice\\\" (change)=\\\"saveStateToService()\\\">\\n                    <mat-radio-button color=\\\"primary\\\" [value]=\\\"true\\\">Включен</mat-radio-button>\\n                    <mat-radio-button color=\\\"primary\\\" [value]=\\\"false\\\">Выключен</mat-radio-button>\\n                </mat-radio-group>\\n            </mat-card-content>\\n        </mat-card>\\n\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <h2 class=\\\"card-title\\\">Ссылка для копирования:</h2> \\n                <input class=\\\"item-input copy-link\\\" [value]=\\\"copyLink\\\" disabled />\\n                <button \\n                    [cbContent]=\\\"copyLink\\\" \\n                    (click)=\\\"copyLinkToClipboard()\\\" \\n                    ngxClipboard \\n                    mat-flat-button \\n                    color=\\\"primary\\\" \\n                    class=\\\"copy-link-button\\\">\\n                    \\n                    Скопировать\\n                </button>\\n            </mat-card-content>\\n        </mat-card>\\n    </div>\\n\\n    <div class=\\\"row-container\\\">\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <div class=\\\"inputs-container\\\">\\n                    <div>\\n                        <h2 class=\\\"card-title\\\">Роли:</h2> \\n                        <div *ngFor=\\\"let role of roles; let i = index; trackBy: trackByFn\\\" class=\\\"input-container\\\">\\n                            <input [value]=\\\"role\\\" (keyup)=\\\"onRoleValueChange($event, i)\\\" class=\\\"item-input\\\" />\\n                            <button \\n                                (click)=\\\"removeRole(i)\\\" \\n                                mat-flat-button \\n                                color=\\\"accent\\\" \\n                                class=\\\"remove-item-button\\\">\\n                                \\n                                X\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <button \\n                        (click)=\\\"addFormControlForRole()\\\" \\n                        mat-raised-button \\n                        color=\\\"primary\\\" \\n                        class=\\\"add-item-button\\\">\\n                        \\n                        Добавить\\n                    </button>\\n                </div>\\n            </mat-card-content>\\n        </mat-card>\\n\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <div class=\\\"inputs-container\\\">\\n                    <div>\\n                        <h2 class=\\\"card-title\\\">Команда:</h2> \\n                        <div *ngFor=\\\"let teamMember of teamMembers; let i = index; trackBy: trackByFn\\\" class=\\\"input-container\\\">\\n                            <input [value]=\\\"teamMember\\\" (keyup)=\\\"onTeamMemberValueChange($event, i)\\\" class=\\\"item-input\\\" />\\n                            <button \\n                                (click)=\\\"removeTeamMember(i)\\\"\\n                                mat-flat-button color=\\\"accent\\\" \\n                                class=\\\"remove-item-button\\\">\\n                                \\n                                X\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <button \\n                        (click)=\\\"addFormControlForTeamMember()\\\" \\n                        mat-raised-button color=\\\"primary\\\" \\n                        class=\\\"add-item-button\\\">\\n                        \\n                        Добавить\\n                    </button>\\n                </div>\\n            </mat-card-content>\\n        </mat-card>\\n\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <h2 class=\\\"card-title\\\">Таблица доступных ролей:</h2>\\n                <app-roles-table [teamMembers]=\\\"teamMembers\\\" [roles]=\\\"roles\\\"></app-roles-table>\\n            </mat-card-content>\\n        </mat-card>\\n\\n    </div>\\n\\n    <div class=\\\"row-container\\\">\\n        <mat-card class=\\\"grow\\\">\\n            <mat-card-content>\\n                <h2 class=\\\"card-title\\\">Оповещения с Slack:</h2>\\n                <mat-slide-toggle [checked]=\\\"isPrivateChannel\\\" (change)=\\\"toogleChannelType($event)\\\" class=\\\"toggle\\\">Channel is private</mat-slide-toggle>\\n                <mat-form-field class=\\\"full-width\\\">\\n                    <input [value]=\\\"slackToken\\\" (keyup)=\\\"onSlackTokenValueChange($event)\\\" matInput placeholder=\\\"Токен для Slack API\\\" />\\n                </mat-form-field>\\n                <mat-form-field class=\\\"full-width\\\">\\n                    <input [value]=\\\"slackChannel\\\" (keyup)=\\\"onSlackChannelValueChange($event)\\\" matInput placeholder=\\\"ID канала\\\" />\\n                </mat-form-field>\\n            </mat-card-content>\\n        </mat-card>\\n    </div>\\n</div>\\n\"","module.exports = \".cards-content {\\n  padding: 5px;\\n  display: flex;\\n  flex-direction: column; }\\n\\n.card-title {\\n  margin: 10px 0;\\n  color: rgba(0, 0, 0, 0.54); }\\n\\nmat-card {\\n  margin: 5px;\\n  padding: 50px; }\\n\\n.toggle {\\n  margin-bottom: 5px; }\\n\\nmat-card-content {\\n  height: 100%; }\\n\\n.inputs-container {\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  justify-content: space-between; }\\n\\n.input-container {\\n  display: flex;\\n  margin-top: 12px; }\\n\\n.item-input {\\n  width: 180px;\\n  padding: 8px;\\n  font-size: 14px;\\n  border: 1px solid rgba(0, 0, 0, 0.12); }\\n\\n.add-item-button {\\n  margin-top: 16px; }\\n\\n.remove-item-button {\\n  margin-left: 8px;\\n  height: 31px;\\n  width: 32px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  margin-top: 2px;\\n  -webkit-transform: scale(0.8);\\n          transform: scale(0.8);\\n  font-weight: bold; }\\n\\n.row-container {\\n  display: flex;\\n  justify-content: center;\\n  width: 1320px;\\n  align-self: center; }\\n\\nmat-card-content {\\n  display: flex;\\n  flex-direction: column; }\\n\\nmat-radio-group {\\n  display: flex;\\n  flex-direction: column;\\n  padding-top: 8px; }\\n\\nmat-radio-button {\\n  margin: 2px 0; }\\n\\n.grow {\\n  flex-grow: 1; }\\n\\n.copy-link {\\n  width: 250px;\\n  margin-top: 12px; }\\n\\n.copy-link-button {\\n  display: flex;\\n  align-self: center;\\n  margin-top: 12px;\\n  height: 36px; }\\n\\n.full-width {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9zZXR0aW5ncy9EOlxc0J/QtdGA0LXQvdC+0YFcXFByb2plY3RzXFxhZ2lsZS1yb2xlcy1yYW5kb21pemVyMi9zcmNcXGFwcFxcY29tcG9uZW50c1xcc2V0dGluZ3NcXHNldHRpbmdzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBWTtFQUNaLGNBQWE7RUFFYix1QkFBc0IsRUFDdkI7O0FBRUQ7RUFDRSxlQUFjO0VBQ2QsMkJBQTBCLEVBQzNCOztBQUVEO0VBQ0UsWUFBVztFQUNYLGNBQWEsRUFDZDs7QUFFRDtFQUNFLG1CQUFrQixFQUNuQjs7QUFFRDtFQUNFLGFBQVksRUFDYjs7QUFFRDtFQUNFLGNBQWE7RUFDYix1QkFBc0I7RUFDdEIsYUFBWTtFQUNaLCtCQUE4QixFQUMvQjs7QUFFRDtFQUNFLGNBQWE7RUFDYixpQkFBZ0IsRUFDakI7O0FBRUQ7RUFDRSxhQUFZO0VBQ1osYUFBWTtFQUNaLGdCQUFlO0VBQ2Ysc0NBQXFDLEVBQ3RDOztBQUVEO0VBQ0UsaUJBQWdCLEVBQ2pCOztBQUVEO0VBQ0UsaUJBQWdCO0VBQ2hCLGFBQVk7RUFDWixZQUFXO0VBQ1gsY0FBYTtFQUNiLG9CQUFtQjtFQUNuQix3QkFBdUI7RUFDdkIsZ0JBQWU7RUFDZiw4QkFBcUI7VUFBckIsc0JBQXFCO0VBQ3JCLGtCQUFpQixFQUNsQjs7QUFFRDtFQUNFLGNBQWE7RUFDYix3QkFBdUI7RUFDdkIsY0FBYTtFQUNiLG1CQUFrQixFQUNuQjs7QUFFRDtFQUNFLGNBQWE7RUFDYix1QkFBc0IsRUFDdkI7O0FBRUQ7RUFDRSxjQUFhO0VBQ2IsdUJBQXNCO0VBQ3RCLGlCQUFnQixFQUNqQjs7QUFFRDtFQUNFLGNBQWEsRUFDZDs7QUFFRDtFQUNFLGFBQVksRUFDYjs7QUFFRDtFQUNFLGFBQVk7RUFDWixpQkFBZ0IsRUFDakI7O0FBRUQ7RUFDRSxjQUFhO0VBQ2IsbUJBQWtCO0VBQ2xCLGlCQUFnQjtFQUNoQixhQUFZLEVBQ2I7O0FBRUQ7RUFDRSxZQUFXLEVBQ1oiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL3NldHRpbmdzL3NldHRpbmdzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmRzLWNvbnRlbnQge1xuICBwYWRkaW5nOiA1cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4uY2FyZC10aXRsZSB7XG4gIG1hcmdpbjogMTBweCAwO1xuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTtcbn1cblxubWF0LWNhcmQge1xuICBtYXJnaW46IDVweDtcbiAgcGFkZGluZzogNTBweDtcbn1cblxuLnRvZ2dsZSB7XG4gIG1hcmdpbi1ib3R0b206IDVweDtcbn1cblxubWF0LWNhcmQtY29udGVudCB7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLmlucHV0cy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cblxuLmlucHV0LWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbi10b3A6IDEycHg7XG59XG5cbi5pdGVtLWlucHV0IHtcbiAgd2lkdGg6IDE4MHB4O1xuICBwYWRkaW5nOiA4cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKTtcbn1cblxuLmFkZC1pdGVtLWJ1dHRvbiB7XG4gIG1hcmdpbi10b3A6IDE2cHg7XG59XG5cbi5yZW1vdmUtaXRlbS1idXR0b24ge1xuICBtYXJnaW4tbGVmdDogOHB4O1xuICBoZWlnaHQ6IDMxcHg7XG4gIHdpZHRoOiAzMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMnB4O1xuICB0cmFuc2Zvcm06IHNjYWxlKDAuOCk7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ucm93LWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7IFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgd2lkdGg6IDEzMjBweDsgXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbn1cblxubWF0LWNhcmQtY29udGVudCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbm1hdC1yYWRpby1ncm91cCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmctdG9wOiA4cHg7XG59XG5cbm1hdC1yYWRpby1idXR0b24ge1xuICBtYXJnaW46IDJweCAwO1xufVxuXG4uZ3JvdyB7XG4gIGZsZXgtZ3JvdzogMTtcbn1cblxuLmNvcHktbGluayB7XG4gIHdpZHRoOiAyNTBweDtcbiAgbWFyZ2luLXRvcDogMTJweDtcbn1cblxuLmNvcHktbGluay1idXR0b24ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDEycHg7XG4gIGhlaWdodDogMzZweDtcbn1cblxuLmZ1bGwtd2lkdGgge1xuICB3aWR0aDogMTAwJTtcbn0iXX0= */\"","import { RandomizerModes } from '../../enums/randomizer-modes.enum';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { Component, ChangeDetectionStrategy, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { MatSnackBar, MatSlideToggleChange } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport { map, filter, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-settings',\n    templateUrl: './settings.component.html',\n    styleUrls: ['./settings.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettingsComponent implements OnInit, OnDestroy {\n    public roles = this.dataStorageService.roles;\n    public teamMembers = this.dataStorageService.teamMembers;\n    public randomizerMode = this.dataStorageService.randomizerMode;\n    public instantChoice = this.dataStorageService.instantChoice;\n    public slackToken = this.dataStorageService.slackToken;\n    public slackChannel = this.dataStorageService.slackChannel;\n    public isPrivateChannel = this.dataStorageService.isPrivateChannel;\n    public randomizerModes = RandomizerModes;\n    public copyLink: string;\n\n    private onDestroy$ = new Subject<void>();\n\n    constructor(private dataStorageService: DataStorageService, private snackBar: MatSnackBar, private cd: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        this.dataStorageService\n            .getState$()\n            .pipe(\n                filter(state => !!state),\n                map((state: string) => `${window.location.href.replace('settings', '')}?data=${state}`),\n                takeUntil(this.onDestroy$),\n            )\n            .subscribe((link: string) => {\n                this.copyLink = link;\n                this.cd.detectChanges();\n            });\n\n        this.dataStorageService.updateState();\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    public trackByFn = number => number;\n\n    public addFormControlForRole(): void {\n        this.roles = [...this.roles, ''];\n    }\n\n    public onRoleValueChange(event: Event, index: number): void {\n        const newValue = (event.target as HTMLInputElement).value;\n\n        this.roles = [...this.roles.slice(0, index), newValue, ...this.roles.slice(index + 1, this.roles.length)];\n    }\n\n    public removeRole(roleIndex: number): void {\n        this.roles = [...this.roles.slice(0, roleIndex), ...this.roles.slice(roleIndex + 1, this.roles.length)];\n    }\n\n    public addFormControlForTeamMember(): void {\n        this.teamMembers = [...this.teamMembers, ''];\n    }\n\n    public onTeamMemberValueChange(event: Event, index: number): void {\n        const newValue = (event.target as HTMLInputElement).value;\n\n        this.teamMembers = [...this.teamMembers.slice(0, index), newValue, ...this.teamMembers.slice(index + 1, this.teamMembers.length)];\n    }\n\n    public removeTeamMember(teamMemberIndex: number): void {\n        this.teamMembers = [\n            ...this.teamMembers.slice(0, teamMemberIndex),\n            ...this.teamMembers.slice(teamMemberIndex + 1, this.teamMembers.length),\n        ];\n    }\n\n    public saveStateToService(): void {\n        this.dataStorageService.randomizerMode = this.randomizerMode;\n        this.dataStorageService.instantChoice = this.instantChoice;\n        this.dataStorageService.updateState();\n    }\n\n    public copyLinkToClipboard(): void {\n        this.snackBar.open('Ссылка скопирована в буфер обмена', '', { duration: 1000 });\n    }\n\n    public onSlackTokenValueChange(event: Event): void {\n        this.dataStorageService.slackToken = (event.target as HTMLInputElement).value;\n    }\n\n    public onSlackChannelValueChange(event: Event): void {\n        this.dataStorageService.slackChannel = (event.target as HTMLInputElement).value;\n    }\n\n    public toogleChannelType(event: MatSlideToggleChange): void {\n        this.dataStorageService.isPrivateChannel = event.checked;\n    }\n}\n","export enum RandomizerModes {\n    NEW_MEMBERS_FOR_ITERATION,\n    NEW_MEMBERS_FOR_ROLE,\n    NO_RESTRICTIONS,\n}\n","import { DataStorageInterface } from '../interfaces/data-storage.interface';\nimport { RolesMapInterface } from '../interfaces/roles-map.interface';\nimport { MinimizedDataStorageInterface } from '../interfaces/minimized-data-storage.interface';\n\nconst NUMBER_SYSTEM_BASE = 36;\n\nexport function compressSettings({\n    teamMembers,\n    roles,\n    rolesMap,\n    randomizerMode,\n    instantChoice,\n    slackToken,\n    slackChannel,\n    isPrivateChannel,\n}: DataStorageInterface): MinimizedDataStorageInterface {\n    const compressedRolesMap = teamMembers\n        .map((person: string) => {\n            const { teamMemberRoles } = rolesMap.find(({ teamMember }: RolesMapInterface) => teamMember === person);\n\n            return roles.map((role: string) => +teamMemberRoles.includes(role)).join('');\n        })\n        .map((stringifiedMemberRoles: string) => parseInt(`1${stringifiedMemberRoles}`, 2))\n        .map((integerRepresentation: number) => integerRepresentation.toString(NUMBER_SYSTEM_BASE))\n        .join('|');\n\n    return {\n        t: teamMembers,\n        r: roles,\n        z: compressedRolesMap,\n        m: randomizerMode,\n        i: +instantChoice,\n        s: slackToken,\n        c: slackChannel,\n        p: isPrivateChannel,\n    };\n}\n\nexport function decompressSettings({ t, r, z, m, i, s, c, p }: MinimizedDataStorageInterface): DataStorageInterface {\n    const teamMembers = t;\n    const roles = r;\n\n    const stringRepresentation = z\n        .split('|')\n        .map((stringifiedMemberRoles: string) => parseInt(stringifiedMemberRoles, NUMBER_SYSTEM_BASE))\n        .map((integerRepresentation: number) => integerRepresentation.toString(2).substr(1))\n        .join('');\n\n    const rolesMap = teamMembers.map((teamMember: string, teamMemberIndex: number) => ({\n        teamMember,\n        teamMemberRoles: roles.filter((_, roleIndex: number) => !!+stringRepresentation[teamMemberIndex * roles.length + roleIndex]),\n    }));\n\n    return {\n        teamMembers,\n        roles,\n        rolesMap,\n        randomizerMode: m,\n        instantChoice: !!i,\n        slackToken: s,\n        slackChannel: c,\n        isPrivateChannel: p,\n    };\n}\n","import { MinimizedDataStorageInterface } from '../../interfaces/minimized-data-storage.interface';\nimport { DataStorageInterface } from '../../interfaces/data-storage.interface';\nimport { RandomizerModes } from '../../enums/randomizer-modes.enum';\nimport { RolesMapInterface } from '../../interfaces/roles-map.interface';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { compressSettings, decompressSettings } from '../../helpers/data-compression.helper';\n\nconst defaultRoles: string[] = ['Scrum Master', 'Release Manager'];\nconst defaultTeamMembers: string[] = ['Name 1', 'Name 2', 'Name 3'];\nconst defaultRolesMap: RolesMapInterface[] = [\n    {\n        teamMember: 'Name 1',\n        teamMemberRoles: ['Scrum Master', 'Release Manager'],\n    },\n    {\n        teamMember: 'Name 2',\n        teamMemberRoles: ['Scrum Master', 'Release Manager'],\n    },\n    {\n        teamMember: 'Name 3',\n        teamMemberRoles: ['Scrum Master', 'Release Manager'],\n    },\n];\nconst defaultRandomizerMode = RandomizerModes.NEW_MEMBERS_FOR_ITERATION;\nconst defaultInstantChoice = false;\nconst defaultSlackToken = '';\nconst defaultSlackChannel = '';\n\n@Injectable()\nexport class DataStorageService {\n    private _rolesMap: RolesMapInterface[];\n    private _teamMembers: string[];\n    private _roles: string[];\n    private _randomizerMode: RandomizerModes;\n    private _instantChoice: boolean;\n    private _slackToken: string;\n    private _slackChannel: string;\n    private _isPrivateChannel = false;\n    private _state = new ReplaySubject<DataStorageInterface>(1);\n\n    public get isPrivateChannel(): boolean {\n        return this._isPrivateChannel;\n    }\n\n    public set isPrivateChannel(isPrivate: boolean) {\n        this._isPrivateChannel = isPrivate;\n    }\n\n    public get rolesMap(): RolesMapInterface[] {\n        return this._rolesMap || defaultRolesMap;\n    }\n\n    public set rolesMap(rolesMap: RolesMapInterface[]) {\n        this._rolesMap = rolesMap;\n    }\n\n    public get teamMembers(): string[] {\n        return this._teamMembers || defaultTeamMembers;\n    }\n\n    public set teamMembers(teamMembers: string[]) {\n        this._teamMembers = teamMembers;\n    }\n\n    public get roles(): string[] {\n        return this._roles || defaultRoles;\n    }\n\n    public set roles(roles: string[]) {\n        this._roles = roles;\n    }\n\n    public get randomizerMode(): RandomizerModes {\n        return this._randomizerMode || defaultRandomizerMode;\n    }\n\n    public set randomizerMode(randomizerMode: RandomizerModes) {\n        this._randomizerMode = randomizerMode;\n    }\n\n    public get instantChoice(): boolean {\n        return this._instantChoice || defaultInstantChoice;\n    }\n\n    public set instantChoice(instantChoice: boolean) {\n        this._instantChoice = instantChoice;\n    }\n\n    public get slackToken(): string {\n        return this._slackToken || defaultSlackToken;\n    }\n\n    public set slackToken(slackToken: string) {\n        this._slackToken = slackToken;\n    }\n\n    public get slackChannel(): string {\n        return this._slackChannel || defaultSlackChannel;\n    }\n\n    public set slackChannel(slackChannel: string) {\n        this._slackChannel = slackChannel;\n    }\n\n    public getState$(): Observable<string> {\n        return this._state.pipe(map((state: DataStorageInterface) => JSON.stringify(compressSettings(state))));\n    }\n\n    public restoreState(minimizedServiceData: MinimizedDataStorageInterface): void {\n        const serviceData = decompressSettings(minimizedServiceData);\n\n        this._teamMembers = serviceData.teamMembers;\n        this._roles = serviceData.roles;\n        this._rolesMap = serviceData.rolesMap;\n        this._randomizerMode = serviceData.randomizerMode;\n        this._instantChoice = serviceData.instantChoice;\n        this._slackToken = serviceData.slackToken;\n        this._slackChannel = serviceData.slackChannel;\n        this._isPrivateChannel = serviceData.isPrivateChannel;\n\n        this.updateState();\n    }\n\n    public updateState(): void {\n        this._state.next({\n            teamMembers: this.teamMembers,\n            roles: this.roles,\n            rolesMap: this.rolesMap,\n            randomizerMode: this.randomizerMode,\n            instantChoice: this.instantChoice,\n            slackToken: this.slackToken,\n            slackChannel: this.slackChannel,\n            isPrivateChannel: this.isPrivateChannel,\n        });\n    }\n}\n","export const SLACK_API_URL = `https://slack.com/api/`;\nexport const SLACK_CHANNELS_SET_TOPIC = `channels.setTopic`;\nexport const SLACK_PRIVATE_CHANNEL_SET_TOPIC = `groups.setTopic`;\nexport const LINE_BREAK_CHARACTER = `\\n`;","import { Injectable } from '@angular/core';\nimport { ChosenRoleInterface } from '../../interfaces/chosen-role.interface';\nimport { HttpClient } from '@angular/common/http';\nimport { LINE_BREAK_CHARACTER, SLACK_API_URL, SLACK_CHANNELS_SET_TOPIC, SLACK_PRIVATE_CHANNEL_SET_TOPIC } from './slack-api.config';\nimport { DataStorageService } from '../data-storage/data-storage.service';\n\n@Injectable()\nexport class SlackApiService {\n    constructor(protected http: HttpClient, private dataStorageService: DataStorageService) {}\n\n    public setTopic(chosenRoles: ChosenRoleInterface[]) {\n        const chosenRolesArray: string[] = [];\n\n        chosenRoles.forEach((chosenRole: ChosenRoleInterface) => {\n            chosenRolesArray.push(`${chosenRole.role}: <@${chosenRole.teamMember}>`);\n        });\n\n        const topic = `${LINE_BREAK_CHARACTER}${chosenRolesArray.join(LINE_BREAK_CHARACTER)}`;\n        const params = {\n            topic,\n            token: this.dataStorageService.slackToken,\n            channel: this.dataStorageService.slackChannel,\n        };\n\n        const SET_TOPIC = this.dataStorageService.isPrivateChannel ? SLACK_PRIVATE_CHANNEL_SET_TOPIC : SLACK_CHANNELS_SET_TOPIC\n\n        this.http.get(`${SLACK_API_URL}${SET_TOPIC}`, { params }).subscribe();\n    }\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"sourceRoot":""}